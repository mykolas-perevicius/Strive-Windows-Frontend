
--- START FILE (First 100 lines): web\public\vite.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
--- END FILE: web\public\vite.svg ---

--- START FILE (First 100 lines): web\src\assets\react.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
--- END FILE: web\src\assets\react.svg ---

--- START FILE (First 100 lines): web\src\components\contexts\appSettingsContext.ts ---
// src/components/contexts/appSettingsContext.ts
import { createContext } from 'react';
import type { AppSettingsProviderState } from './AppSettingsProvider'; // Import the type

// Define the initial state here as well or import it
const initialState: AppSettingsProviderState = {
  theme: "system",
  setTheme: () => null,
  language: "en",
  setLanguage: () => null,
};

// Create and export the context
export const AppSettingsProviderContext = createContext<AppSettingsProviderState>(initialState);
--- END FILE: web\src\components\contexts\appSettingsContext.ts ---

--- START FILE (First 100 lines): web\src\components\contexts\AppSettingsProvider.tsx ---
// src/components/contexts/AppSettingsProvider.tsx
import React, { useEffect, useState } from "react"; // Removed createContext
// Import the context object from its new file
import { AppSettingsProviderContext } from './appSettingsContext';

// --- Type Definitions ---
type Theme = "dark" | "light" | "system";
type Language = "en" | "es";

// Keep the exported State type here as it describes the provider's value
export type AppSettingsProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  language: Language;
  setLanguage: (language: Language) => void;
};

type AppSettingsProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  defaultLanguage?: Language;
  storageKeyTheme?: string;
  storageKeyLanguage?: string;
};

// Remove createContext call from here
// const initialState: AppSettingsProviderState = { ... };
// export const AppSettingsProviderContext = createContext<AppSettingsProviderState>(initialState);

// --- Provider Component ---
export function AppSettingsProvider({
  children,
  defaultTheme = "system",
  defaultLanguage = "en",
  storageKeyTheme = "vite-ui-theme",
  storageKeyLanguage = "vite-ui-language",
  ...props
}: AppSettingsProviderProps) {
  const [theme, setThemeState] = useState<Theme>(
    () => (localStorage.getItem(storageKeyTheme) as Theme) || defaultTheme
  );
  const [language, setLanguageState] = useState<Language>(
    () => (localStorage.getItem(storageKeyLanguage) as Language) || defaultLanguage
  );

  // --- Theme Effects ---
  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove("light", "dark");
    let systemTheme: Theme = 'light';
    if (theme === "system") {
        systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    root.classList.add(theme === "system" ? systemTheme : theme);
  }, [theme]);

  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleChange = () => {
      if (theme === 'system') {
        const systemTheme = mediaQuery.matches ? "dark" : "light";
        const root = window.document.documentElement;
        root.classList.remove("light", "dark");
        root.classList.add(systemTheme);
      }
    };
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, [theme]);
  // --- End Theme Effects ---

  const value: AppSettingsProviderState = { // Explicitly type value
    theme,
    setTheme: (newTheme: Theme) => {
      localStorage.setItem(storageKeyTheme, newTheme);
      setThemeState(newTheme);
    },
    language,
    setLanguage: (newLanguage: Language) => {
      localStorage.setItem(storageKeyLanguage, newLanguage);
      setLanguageState(newLanguage);
      console.log(`Language set to ${newLanguage} in context`);
    },
  };

  // Use the imported context here
  return (
    <AppSettingsProviderContext.Provider {...props} value={value}>
      {children}
    </AppSettingsProviderContext.Provider>
  );
}
--- END FILE: web\src\components\contexts\AppSettingsProvider.tsx ---

--- START FILE (First 100 lines): web\src\components\layout\BottomNav.tsx ---
// src/components/layout/BottomNav.tsx
import { Link, useLocation } from "react-router-dom";
// import { Button } from "@/components/ui/button"; // Removed unused import
import { cn } from "@/lib/utils";
import {
  UserRound, // Profile Icon
  Dumbbell, // Workouts Icon
  PlusSquare, // Start Workout Icon
  CalendarDays, // Calendar Icon
  LineChart, // Stats Icon
} from "lucide-react";

// Define navigation items
const navItems = [
  { href: "/profile", label: "Profile", icon: UserRound },
  { href: "/workouts", label: "Workouts", icon: Dumbbell },
  { href: "/start-workout", label: "Start Workout", icon: PlusSquare },
  { href: "/calendar", label: "Calendar", icon: CalendarDays },
  { href: "/stats", label: "Stats", icon: LineChart },
];

export function BottomNav() {
  const location = useLocation();

  return (
    <footer className="sticky bottom-0 z-50 w-full border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <nav className="flex h-16 items-center justify-around px-2">
        {navItems.map((item) => {
          const isActive = location.pathname === item.href || (location.pathname === '/dashboard' && item.href === '/profile'); // Handle /dashboard mapping to /profile highlight
          return (
            <Link
              key={item.label}
              to={item.href}
              className={cn(
                "flex h-full flex-col items-center justify-center gap-1 px-2 text-xs font-medium text-muted-foreground transition-colors hover:text-primary sm:text-sm",
                isActive && "text-primary" // Highlight active link
              )}
              aria-current={isActive ? "page" : undefined}
            >
              <item.icon className={cn("h-5 w-5 sm:h-6 sm:w-6", isActive ? "text-primary" : "")} />
              {/* Adjusted label visibility for better mobile experience */}
              <span className={cn("text-[10px] sm:text-xs", !isActive && "text-muted-foreground")}>{item.label}</span>
              {/* <span className="hidden sm:inline">{item.label}</span> */}
            </Link>
          );
        })}
      </nav>
    </footer>
  );
}
--- END FILE: web\src\components\layout\BottomNav.tsx ---

--- START FILE (First 100 lines): web\src\components\layout\MainLayout.tsx ---
import { Outlet } from "react-router-dom"; // Outlet renders the matched child route component
import { BottomNav } from "./BottomNav";

export function MainLayout() {
  return (
    <div className="relative flex min-h-screen flex-col bg-background">
      {/* Main content area */}
      <main className="flex-1 pb-16"> {/* Add padding-bottom equal to nav height */}
        <Outlet /> {/* Child routes (ProfilePage, etc.) will render here */}
      </main>

      {/* Bottom Navigation */}
      <BottomNav />
    </div>
  );
}
--- END FILE: web\src\components\layout\MainLayout.tsx ---

--- START FILE (First 100 lines): web\src\components\layout\SettingsLayout.tsx ---
// src/components/layout/SettingsLayout.tsx
import { Outlet, useNavigate } from "react-router-dom";
import { SettingsNav } from "@/components/settings/SettingsNav";
// import { Separator } from "@/components/ui/separator"; // Removed unused import
import { Button } from "@/components/ui/button";
import { ArrowLeft } from "lucide-react";

export function SettingsLayout() {
  const navigate = useNavigate();

  const handleBackClick = () => {
    navigate('/profile'); // Or navigate(-1)
  };

  return (
    <div className="container mx-auto max-w-5xl p-4">
       {/* Header with Back Button */}
       <div className="relative mb-6 flex items-center">
         <Button
           variant="ghost"
           size="icon"
           className="-ml-4"
           onClick={handleBackClick}
           aria-label="Go back to profile"
         >
           <ArrowLeft className="h-5 w-5" />
         </Button>
       </div>

      {/* Main Settings Area */}
      <div className="flex flex-col space-y-8 md:flex-row md:space-x-12 md:space-y-0">
        {/* Sidebar Navigation */}
        <aside className="w-full md:w-1/4 lg:w-1/5">
          <SettingsNav />
        </aside>

        {/* Content Area */}
        <div className="flex-1">
          <Outlet />
        </div>
      </div>
    </div>
  );
}

// Default export might be useful if you ever lazy load this layout
// export default SettingsLayout;
--- END FILE: web\src\components\layout\SettingsLayout.tsx ---

--- START FILE (First 100 lines): web\src\components\settings\SettingsAccountPage.tsx ---
// src/pages/app/settings/SettingsAccountPage.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator"; // Verify this path and component exist
import { Upload, Edit2, Trash2 } from "lucide-react"; // Removed ShieldCheck

// Dummy user data
const userAccount = {
  name: "Mitch",
  email: "m****u@gmail.com",
  phone: "***-***-6789",
  avatarUrl: null,
  initials: "MC",
  isSmsAuthEnabled: true,
};

export function SettingsAccountPage() {
  const handleEditEmail = () => console.log("Edit Email clicked");
  const handleEditPhone = () => console.log("Edit Phone clicked");
  const handleChangePassword = () => console.log("Change Password clicked");
  const handleToggleSmsAuth = () => console.log("Toggle SMS Auth clicked");
  const handleDeleteAccount = () => console.log("Delete Account clicked");
  const handleChangeImage = () => console.log("Change Image clicked");

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-bold">Account</h1>

      {/* Profile Picture Section */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Profile Picture</h2>
         <div className="flex items-center space-x-4">
            <Avatar className="h-16 w-16 border">
                <AvatarImage src={userAccount.avatarUrl ?? undefined} alt={userAccount.name} />
                <AvatarFallback>{userAccount.initials}</AvatarFallback>
            </Avatar>
             <Button variant="outline" size="sm" onClick={handleChangeImage}>
                 <Upload className="mr-2 h-4 w-4" /> Change Image
            </Button>
         </div>
         <Separator /> {/* Use Separator here */}
      </section>

      {/* Email & Phone Section */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Contact Information</h2>
        <div className="space-y-3">
          {/* Email */}
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Email</p>
              <p className="text-muted-foreground">{userAccount.email}</p>
            </div>
            <Button variant="ghost" size="sm" onClick={handleEditEmail}>
              <Edit2 className="mr-1 h-4 w-4" /> Edit
            </Button>
          </div>
          {/* Phone */}
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Phone Number</p>
              <p className="text-muted-foreground">{userAccount.phone}</p>
            </div>
            <Button variant="ghost" size="sm" onClick={handleEditPhone}>
               <Edit2 className="mr-1 h-4 w-4" /> Edit
            </Button>
          </div>
        </div>
         <Separator /> {/* Use Separator here */}
      </section>

      {/* Security Section */}
       <section className="space-y-4">
         <h2 className="text-lg font-semibold">Security</h2>
         <div className="space-y-3">
            {/* Change Password */}
            <div className="flex items-center justify-between">
                <p className="text-sm font-medium">Password</p>
                 <Button variant="outline" size="sm" onClick={handleChangePassword}>
                    Change Password
                </Button>
            </div>
            {/* SMS Auth */}
            <div className="flex items-center justify-between">
                 <div>
                    <p className="text-sm font-medium">SMS Backup Authentication</p>
                    <p className="text-xs text-muted-foreground">
                      {userAccount.isSmsAuthEnabled ? "Enabled" : "Disabled"}
                    </p>
                 </div>
                 <Button
                    variant="outline"
                    size="sm"
                    onClick={handleToggleSmsAuth}
                 >
                    {userAccount.isSmsAuthEnabled ? "Remove" : "Enable"} SMS Authentication
                </Button>
            </div>
         </div>
          <Separator /> {/* Use Separator here */}
--- END FILE: web\src\components\settings\SettingsAccountPage.tsx ---

--- START FILE (First 100 lines): web\src\components\settings\SettingsNav.tsx ---
// src/components/settings/SettingsNav.tsx
import { NavLink } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useAppSettings } from "@/hooks/useAppSettings";
import {
  UserCog, Palette, CreditCard, Languages, Mail, LogOut,
} from "lucide-react";

// --- Data and Types ---
const settingsNavItems = [
  { href: "/settings/account", label: "Account", icon: UserCog, tKey: 'account' },
  { href: "/settings/appearance", label: "Appearance", icon: Palette, tKey: 'appearance' },
  { href: "/settings/subscription", label: "Subscription", icon: CreditCard, tKey: 'subscription' },
  { href: "/settings/language", label: "Language", icon: Languages, tKey: 'language' },
  { href: "/settings/contact", label: "Contact Us", icon: Mail, tKey: 'contact' },
];

// Type for translation keys
type TranslationKey = 'account' | 'appearance' | 'subscription' | 'language' | 'contact' | 'logout';

// Type for the translations object
type Translations = {
  [lang in 'en' | 'es']: { // Use specific language codes
    [key in TranslationKey]: string;
  };
};

const translations: Translations = {
  en: {
    account: 'Account',
    appearance: 'Appearance',
    subscription: 'Subscription',
    language: 'Language',
    contact: 'Contact Us',
    logout: 'Logout',
  },
  es: {
    account: 'Cuenta',
    appearance: 'Apariencia',
    subscription: 'SuscripciÃ³n',
    language: 'Idioma',
    contact: 'Contacto',
    logout: 'Cerrar sesiÃ³n',
  },
};
// --- End Data and Types ---


export function SettingsNav() {
  const { language } = useAppSettings();

  const handleLogout = () => {
    console.log("Logout clicked - Implement actual logout");
  };

  // Helper function with refined typing
  const t = (key: TranslationKey): string => {
    // Determine the language key, defaulting to 'en' if the current language isn't in our translations
    const langKey: keyof Translations = language in translations ? language : 'en';
    // Get the translation for the determined language and key, fallback to English, then the key itself
    return translations[langKey]?.[key] ?? translations['en']?.[key] ?? key;
  };

  return (
    <nav className="flex flex-col space-y-1 p-2 md:p-0">
      {settingsNavItems.map((item) => (
        <NavLink
          key={item.href}
          to={item.href}
          className={({ isActive }) =>
            cn(
              "flex items-center rounded-md px-3 py-2 text-sm font-medium transition-colors",
              "hover:bg-muted",
              isActive ? "bg-muted text-primary" : "text-muted-foreground"
            )
          }
          end
        >
          <item.icon className="mr-2 h-4 w-4" />
          <span>{t(item.tKey as TranslationKey)}</span> {/* Cast tKey for safety */}
        </NavLink>
      ))}

      {/* Logout Button */}
      <Button
        variant="ghost"
        className="mt-4 flex w-full justify-start px-3 py-2 text-sm font-medium text-destructive hover:bg-destructive/10 hover:text-destructive"
        onClick={handleLogout}
      >
        <LogOut className="mr-2 h-4 w-4" />
        <span>{t('logout')}</span>
      </Button>
    </nav>
  );
}
--- END FILE: web\src\components\settings\SettingsNav.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
--- END FILE: web\src\components\ui\alert-dialog.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\avatar.tsx ---
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
--- END FILE: web\src\components\ui\avatar.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
--- END FILE: web\src\components\ui\button.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\calendar.tsx ---
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }
--- END FILE: web\src\components\ui\calendar.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
--- END FILE: web\src\components\ui\card.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\command.tsx ---
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
--- END FILE: web\src\components\ui\command.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
--- END FILE: web\src\components\ui\dialog.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
--- END FILE: web\src\components\ui\input.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\label.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
--- END FILE: web\src\components\ui\label.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
--- END FILE: web\src\components\ui\popover.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\progress.tsx ---
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
--- END FILE: web\src\components\ui\progress.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\radio-group.tsx ---
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
--- END FILE: web\src\components\ui\radio-group.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\separator.tsx ---
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
--- END FILE: web\src\components\ui\separator.tsx ---

--- START FILE (First 100 lines): web\src\components\ui\table.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
--- END FILE: web\src\components\ui\table.tsx ---

--- START FILE (First 100 lines): web\src\data\dummyStats.ts ---
// src/data/dummyStats.ts

// Example: Weight lifted for a specific exercise over time
export const weightProgressData = [
    { date: '2024-03-01', weight: 80 },
    { date: '2024-03-08', weight: 82.5 },
    { date: '2024-03-15', weight: 82.5 },
    { date: '2024-03-22', weight: 85 },
    { date: '2024-03-29', weight: 85 },
    { date: '2024-04-05', weight: 87.5 }, // Assuming today or recent
    // Add more data points
  ];
  
  // Example: Workout frequency per week
  export const workoutFrequencyData = [
    { week: 'W11', workouts: 3 }, // Week 11
    { week: 'W12', workouts: 4 },
    { week: 'W13', workouts: 2 },
    { week: 'W14', workouts: 4 },
    { week: 'W15', workouts: 3 },
     // Add more data points
  ];
  
  // Example: Volume per workout session (Sets * Reps * Weight)
  export const workoutVolumeData = [
      { date: '2024-03-01', volume: 10500 },
      { date: '2024-03-04', volume: 11200 },
      { date: '2024-03-08', volume: 11800 },
      { date: '2024-03-11', volume: 10900 },
      { date: '2024-03-15', volume: 12100 },
      { date: '2024-03-18', volume: 12500 },
      { date: '2024-03-22', volume: 12800 },
      { date: '2024-03-25', volume: 11500 },
      { date: '2024-03-29', volume: 13100 },
      { date: '2024-04-01', volume: 13500 },
      { date: '2024-04-05', volume: 13800 }, // Assuming today or recent
  ]
  
  // Helper type if needed
  export type DataPoint = {
      date?: string;
      week?: string;
      value?: number;
      weight?: number;
      workouts?: number;
      volume?: number;
      // Add other potential keys
  }
--- END FILE: web\src\data\dummyStats.ts ---

--- START FILE (First 100 lines): web\src\data\dummyWorkouts.ts ---
// src/data/dummyWorkouts.ts

// --- Dummy Template Data ---
// Moved here to satisfy react-refresh/only-export-components rule
export const workoutTemplates = {
    barbell: [
      { id: "b1", name: "Day 1", exercises: ["Bench Press", "Squat", "Deadlift"] },
      { id: "b2", name: "Day 2", exercises: ["Incline Bench Press", "Front Squat", "Romanian Deadlift"] },
      { id: "b3", name: "Day 3", exercises: ["Bench Press", "Squat", "Deadlift"] },
      { id: "b4", name: "Day 4", exercises: ["Incline Bench Press", "Front Squat", "Romanian Deadlift"] },
    ],
    bodyweight: [
      { id: "bwA", name: "Day A", exercises: ["Pull Up", "Decline Push Up", "Bodyweight Row"] },
      { id: "bwB", name: "Day B", exercises: ["Chin Up", "Tricep Dip", "Underhand Bodyweight Row"] },
      { id: "bwC", name: "Day C", exercises: ["Placeholder..."] },
      { id: "bwD", name: "Day D", exercises: ["Placeholder..."] },
    ],
  };
  // --- End Dummy Data ---
  
  // Define a type for better structure if needed later, e.g.:
  // export type WorkoutCategory = 'barbell' | 'bodyweight';
  // export interface SimpleWorkoutTemplate {
  //     id: string;
  //     name: string;
  //     exercises: string[];
  // }
  // export type WorkoutTemplatesData = {
  //     [key in WorkoutCategory]: SimpleWorkoutTemplate[];
  // };
  // export const workoutTemplates: WorkoutTemplatesData = { ... };
--- END FILE: web\src\data\dummyWorkouts.ts ---

--- START FILE (First 100 lines): web\src\data\exercises.ts ---
// src/data/exercises.ts

export interface ExerciseOption {
    value: string; // Unique identifier (e.g., lowercase, hyphenated)
    label: string; // Display name
  }
  
  // Example list - expand this significantly for a real app!
  export const commonExercises: ExerciseOption[] = [
    { value: "bench-press", label: "Bench Press" },
    { value: "barbell-squat", label: "Barbell Squat" },
    { value: "deadlift", label: "Deadlift" },
    { value: "overhead-press", label: "Overhead Press" },
    { value: "barbell-row", label: "Barbell Row" },
    { value: "pull-up", label: "Pull Up" },
    { value: "chin-up", label: "Chin Up" },
    { value: "lat-pulldown", label: "Lat Pulldown" },
    { value: "dumbbell-bench-press", label: "Dumbbell Bench Press" },
    { value: "dumbbell-row", label: "Dumbbell Row" },
    { value: "bicep-curl", label: "Bicep Curl" },
    { value: "triceps-pushdown", label: "Triceps Pushdown" },
    { value: "leg-press", label: "Leg Press" },
    { value: "leg-curl", label: "Leg Curl" },
    { value: "leg-extension", label: "Leg Extension" },
    { value: "calf-raise", label: "Calf Raise" },
    // --- Add many more exercises here ---
  ];
--- END FILE: web\src\data\exercises.ts ---

--- START FILE (First 100 lines): web\src\hooks\useAppSettings.ts ---
// src/hooks/useAppSettings.ts
import { useContext } from 'react';
// Import the context object from its new file
import { AppSettingsProviderContext } from '@/components/contexts/appSettingsContext';
// Import the type from the Provider file
import type { AppSettingsProviderState } from '@/components/contexts/AppSettingsProvider';

export const useAppSettings = (): AppSettingsProviderState => {
  const context = useContext(AppSettingsProviderContext);

  if (context === undefined) {
    throw new Error("useAppSettings must be used within an AppSettingsProvider");
  }

  return context;
};
--- END FILE: web\src\hooks\useAppSettings.ts ---

--- START FILE (First 100 lines): web\src\lib\utils.ts ---
// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Add this function
export function formatTimeElapsed(totalSeconds: number): string {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;

  const paddedSeconds = seconds.toString().padStart(2, '0');
  const paddedMinutes = minutes.toString().padStart(2, '0');

  if (hours > 0) {
    // Pad minutes even if hours are present
    return `${hours}:${paddedMinutes}:${paddedSeconds}`;
  } else {
    // Don't need to pad minutes if < 1 hour, but standard format often does
    return `${minutes.toString().padStart(2, '0')}:${paddedSeconds}`;
     // Or just: return `${minutes}:${paddedSeconds}`; if you prefer 1:05 over 01:05
  }
}
--- END FILE: web\src\lib\utils.ts ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsAccountPage.tsx ---
// src/pages/app/settings/SettingsAccountPage.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator"; // Verify this path and component exist
import { Upload, Edit2, Trash2 } from "lucide-react"; // Removed ShieldCheck

// Dummy user data
const userAccount = {
  name: "Mitch",
  email: "m****u@gmail.com",
  phone: "***-***-6789",
  avatarUrl: null,
  initials: "MC",
  isSmsAuthEnabled: true,
};

export function SettingsAccountPage() {
  const handleEditEmail = () => console.log("Edit Email clicked");
  const handleEditPhone = () => console.log("Edit Phone clicked");
  const handleChangePassword = () => console.log("Change Password clicked");
  const handleToggleSmsAuth = () => console.log("Toggle SMS Auth clicked");
  const handleDeleteAccount = () => console.log("Delete Account clicked");
  const handleChangeImage = () => console.log("Change Image clicked");

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-bold">Account</h1>

      {/* Profile Picture Section */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Profile Picture</h2>
         <div className="flex items-center space-x-4">
            <Avatar className="h-16 w-16 border">
                <AvatarImage src={userAccount.avatarUrl ?? undefined} alt={userAccount.name} />
                <AvatarFallback>{userAccount.initials}</AvatarFallback>
            </Avatar>
             <Button variant="outline" size="sm" onClick={handleChangeImage}>
                 <Upload className="mr-2 h-4 w-4" /> Change Image
            </Button>
         </div>
         <Separator /> {/* Use Separator here */}
      </section>

      {/* Email & Phone Section */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Contact Information</h2>
        <div className="space-y-3">
          {/* Email */}
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Email</p>
              <p className="text-muted-foreground">{userAccount.email}</p>
            </div>
            <Button variant="ghost" size="sm" onClick={handleEditEmail}>
              <Edit2 className="mr-1 h-4 w-4" /> Edit
            </Button>
          </div>
          {/* Phone */}
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Phone Number</p>
              <p className="text-muted-foreground">{userAccount.phone}</p>
            </div>
            <Button variant="ghost" size="sm" onClick={handleEditPhone}>
               <Edit2 className="mr-1 h-4 w-4" /> Edit
            </Button>
          </div>
        </div>
         <Separator /> {/* Use Separator here */}
      </section>

      {/* Security Section */}
       <section className="space-y-4">
         <h2 className="text-lg font-semibold">Security</h2>
         <div className="space-y-3">
            {/* Change Password */}
            <div className="flex items-center justify-between">
                <p className="text-sm font-medium">Password</p>
                 <Button variant="outline" size="sm" onClick={handleChangePassword}>
                    Change Password
                </Button>
            </div>
            {/* SMS Auth */}
            <div className="flex items-center justify-between">
                 <div>
                    <p className="text-sm font-medium">SMS Backup Authentication</p>
                    <p className="text-xs text-muted-foreground">
                      {userAccount.isSmsAuthEnabled ? "Enabled" : "Disabled"}
                    </p>
                 </div>
                 <Button
                    variant="outline"
                    size="sm"
                    onClick={handleToggleSmsAuth}
                 >
                    {userAccount.isSmsAuthEnabled ? "Remove" : "Enable"} SMS Authentication
                </Button>
            </div>
         </div>
          <Separator /> {/* Use Separator here */}
--- END FILE: web\src\pages\app\settings\SettingsAccountPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsAppearancePage.tsx ---
// src/pages/app/settings/SettingsAppearancePage.tsx
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";

// Import the renamed hook
import { useAppSettings } from "@/hooks/useAppSettings"; // <-- Update path/name
import { Sun, Moon, Laptop } from "lucide-react";

export function SettingsAppearancePage() {
  // Use the renamed hook
  const { theme, setTheme } = useAppSettings(); // Only need theme parts here

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-bold">Appearance</h1>

      {/* Theme Selection Section */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Theme</h2>
        <p className="text-sm text-muted-foreground">
          Select the theme for the application.
        </p>
        <RadioGroup
          value={theme}
          onValueChange={(value) => setTheme(value as "light" | "dark" | "system")}
          className="grid max-w-md grid-cols-1 gap-4 pt-2 sm:grid-cols-3"
        >
          {/* Light Theme Option */}
          <div>
            <RadioGroupItem value="light" id="theme-light" className="peer sr-only" />
            <Label
              htmlFor="theme-light"
              className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
            >
              <Sun className="h-5 w-5 mb-2" />
              Light
            </Label>
          </div>
          {/* Dark Theme Option */}
          <div>
            <RadioGroupItem value="dark" id="theme-dark" className="peer sr-only" />
            <Label
              htmlFor="theme-dark"
              className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
            >
              <Moon className="h-5 w-5 mb-2" />
              Dark
            </Label>
          </div>
          {/* System Theme Option */}
          <div>
            <RadioGroupItem value="system" id="theme-system" className="peer sr-only" />
            <Label
              htmlFor="theme-system"
              className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
            >
              <Laptop className="h-5 w-5 mb-2" />
              System
            </Label>
          </div>
        </RadioGroup>
        <Separator className="mt-6" />
      </section>

       {/* Other appearance sections... */}
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">Background</h2>
        <p className="text-sm text-muted-foreground">
          Background settings coming soon...
        </p>
      </section>

    </div>
  );
}

export default SettingsAppearancePage;
--- END FILE: web\src\pages\app\settings\SettingsAppearancePage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsContactPage.tsx ---
// src/pages/app/settings/SettingsContactPage.tsx
import { Mail, Phone } from "lucide-react"; // Icons

// Dummy contact info - replace with actual data or links
const contactInfo = {
    email: "support@striveapp.example.com",
    phone: "+1 (555) 123-4567", // Example phone
    supportLink: "/support", // Example link to a support form/page
};

export function SettingsContactPage() {
  return (
    <div className="space-y-8">
       <h1 className="text-2xl font-bold">Contact Us</h1>

        <section className="space-y-4">
            <h2 className="text-lg font-semibold">Get Support</h2>
            <p className="text-sm text-muted-foreground">
                Have questions or need help? Reach out to us.
            </p>

            <div className="space-y-3 pt-2">
                {/* Email */}
                <div className="flex items-start gap-3">
                    <Mail className="h-5 w-5 text-muted-foreground mt-1 flex-shrink-0" />
                    <div>
                        <p className="text-sm font-medium">Email</p>
                        <a
                            href={`mailto:${contactInfo.email}`}
                            className="text-sm text-primary underline-offset-4 hover:underline"
                        >
                            {contactInfo.email}
                        </a>
                    </div>
                </div>

                 {/* Phone */}
                 <div className="flex items-start gap-3">
                    <Phone className="h-5 w-5 text-muted-foreground mt-1 flex-shrink-0" />
                    <div>
                        <p className="text-sm font-medium">Phone</p>
                         {/* Avoid making phone clickable if it's just for display */}
                        <p className="text-sm text-muted-foreground">{contactInfo.phone}</p>
                         {/* Or make it clickable:
                         <a href={`tel:${contactInfo.phone.replace(/\D/g, '')}`} className="text-sm text-primary underline-offset-4 hover:underline">
                            {contactInfo.phone}
                        </a> */}
                    </div>
                </div>

                {/* Optional: Link to a support page/form */}
                 {/* <div className="flex items-start gap-3">
                    <LifeBuoy className="h-5 w-5 text-muted-foreground mt-1 flex-shrink-0" />
                    <div>
                        <p className="text-sm font-medium">Support Center</p>
                        <Link to={contactInfo.supportLink} className="text-sm text-primary underline-offset-4 hover:underline">
                            Visit our Helpdesk
                        </Link>
                    </div>
                </div> */}
            </div>
        </section>
    </div>
  );
}

export default SettingsContactPage;
--- END FILE: web\src\pages\app\settings\SettingsContactPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsLanguagePage.tsx ---
// src/pages/app/settings/SettingsLanguagePage.tsx
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

// Import the real hook
import { useAppSettings } from "@/hooks/useAppSettings"; // <-- Update path/name

// Remove the placeholder useLanguage hook

const availableLanguages = [
    { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
    { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' },
];

const translations = {
  en: {
    title: "Language",
    subtitle: "Select Language",
    description: "Choose the language displayed in the application.",
  },
  es: {
    title: "Idioma",
    subtitle: "Seleccionar idioma",
    description: "Elige el idioma que se muestra en la aplicaciÃ³n.",
  },
};

export function SettingsLanguagePage() {
  // Use the real hook
  const { language, setLanguage } = useAppSettings(); // Use language parts here
  const t = translations[language]; // Get translations based on current language

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-bold">{t.title}</h1>
      <section className="space-y-4">
        <h2 className="text-lg font-semibold">{t.subtitle}</h2>
        <p className="text-sm text-muted-foreground">{t.description}</p>
        <RadioGroup
          value={language}
          // Ensure the type matches the Language type in the context
          onValueChange={(value) => setLanguage(value as "en" | "es")}
          className="grid max-w-md grid-cols-1 gap-4 pt-2 sm:grid-cols-2"
        >
          {availableLanguages.map((lang) => (
            <div key={lang.code}>
              <RadioGroupItem value={lang.code} id={`lang-${lang.code}`} className="peer sr-only" />
              <Label
                htmlFor={`lang-${lang.code}`}
                className="flex items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
              >
                <span>{lang.name}</span>
                <span className="text-xl" role="img" aria-label={`${lang.name} flag`}>{lang.flag}</span>
              </Label>
            </div>
          ))}
        </RadioGroup>
      </section>
    </div>
  );
}

export default SettingsLanguagePage;
--- END FILE: web\src\pages\app\settings\SettingsLanguagePage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsPlaceholderPage.tsx ---
import { useLocation } from 'react-router-dom';

export function SettingsPlaceholderPage() {
  const location = useLocation();
  // Extract a readable name from the path (e.g., /settings/appearance -> Appearance)
  const pageName = location.pathname.split('/').pop()?.replace('-', ' ') || 'Settings';

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold capitalize">{pageName}</h1>
      <p className="text-muted-foreground">Settings for {pageName} coming soon!</p>
      {/* You could add relevant icons or specific messages based on pageName */}
    </div>
  );
}

export default SettingsPlaceholderPage;
--- END FILE: web\src\pages\app\settings\SettingsPlaceholderPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\settings\SettingsSubscriptionPage.tsx ---
// src/pages/app/settings/SettingsSubscriptionPage.tsx
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { CheckCircle2 } from "lucide-react"; // Example icon

// Dummy subscription data - replace with actual user data
const userSubscription = {
  plan: "Basic", // 'Basic' or 'Premium'
  status: "Active", // 'Active', 'Inactive', 'Trial', etc.
  isPremium: false, // Derived or direct flag
};

export function SettingsSubscriptionPage() {

  const handleManageSubscription = () => {
    console.log("Manage Subscription / Upgrade clicked");
    // Add logic to redirect to billing portal or show upgrade modal
  };

  return (
    <div className="space-y-8">
      <h1 className="text-2xl font-bold">Subscription</h1>

      <section>
        <h2 className="text-lg font-semibold mb-1">Current Plan</h2>
        <p className="text-sm text-muted-foreground mb-4">
          Manage your subscription details and billing information.
        </p>

        {/* Use grid, ensure cards can stretch vertically */}
        <div className="grid gap-6 sm:grid-cols-2 items-stretch"> {/* Added items-stretch */}
          {/* Basic Plan Card */}
          {/* Added flex, flex-col, and justify-between to make footer stick to bottom */}
          <Card className={`flex flex-col justify-between ${userSubscription.plan === 'Basic' ? 'border-primary' : ''}`}>
            <div> {/* Wrap Header and Content */}
                <CardHeader>
                  <CardTitle>Basic Plan</CardTitle>
                  <CardDescription>For individuals getting started.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-2">
                  <p className="text-3xl font-bold">Free</p>
                  <ul className="space-y-1 text-sm text-muted-foreground">
                      <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-500 flex-shrink-0" /> <span>Basic Workout Tracking</span></li> {/* Added flex-shrink-0 to icon */}
                      <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-500 flex-shrink-0" /> <span>Limited History</span></li> {/* Added flex-shrink-0 to icon */}
                  </ul>
                </CardContent>
            </div>
            <CardFooter>
              {userSubscription.plan === 'Basic' ? (
                <Button className="w-full" variant="outline" disabled>
                  Current Plan
                </Button>
              ) : (
                 // This button wouldn't typically appear if user is premium, but included for structure
                 <Button className="w-full" variant="outline" onClick={handleManageSubscription}>
                   Downgrade to Basic (Example)
                 </Button>
              )}
            </CardFooter>
          </Card>

          {/* Premium Plan Card */}
           {/* Added flex, flex-col, and justify-between */}
           <Card className={`flex flex-col justify-between ${userSubscription.plan === 'Premium' ? 'border-primary' : ''}`}>
             <div> {/* Wrap Header and Content */}
                <CardHeader>
                  <CardTitle>Premium Plan</CardTitle>
                  <CardDescription>Unlock advanced features and insights.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-2">
                  <p className="text-3xl font-bold">$X.XX <span className="text-sm font-normal text-muted-foreground">/ month</span></p>
                   <ul className="space-y-1 text-sm text-muted-foreground">
                      <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-500 flex-shrink-0" /> <span>Advanced Analytics</span></li> {/* Added flex-shrink-0 */}
                      <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-500 flex-shrink-0" /> <span>Unlimited History</span></li> {/* Added flex-shrink-0 */}
                      <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-500 flex-shrink-0" /> <span>Priority Support</span></li> {/* Added flex-shrink-0 */}
                  </ul>
                </CardContent>
            </div>
            <CardFooter>
              {userSubscription.plan === 'Premium' ? (
                 <Button className="w-full" variant="outline" onClick={handleManageSubscription}>
                  Manage Subscription
                </Button>
              ) : (
                <Button className="w-full" onClick={handleManageSubscription}>
                  Upgrade to Premium
                </Button>
              )}
            </CardFooter>
          </Card>
        </div>
      </section>

--- END FILE: web\src\pages\app\settings\SettingsSubscriptionPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\ActiveWorkoutPage.tsx ---
// src/pages/app/ActiveWorkoutPage.tsx

// Removed unused React import
import { useState, useEffect, useMemo, useCallback } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from "@/components/ui/progress";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { ActiveWorkoutSession, ActiveExercise } from '@/types/workout';
import {
    CheckCircle, XCircle, Timer, SkipForward,
} from 'lucide-react';
import { formatTimeElapsed } from '@/lib/utils';
import { workoutTemplates as dummyTemplates } from "@/data/dummyWorkouts";
import React from 'react';

// --- loadWorkoutSession function remains the same ---
const loadWorkoutSession = (templateId: string | null): ActiveWorkoutSession | null => {
    let workoutName = "Blank Workout";
    let baseExercises: Omit<ActiveExercise, 'loggedSets'>[] = [];

    if (templateId) {
        let foundTemplate: { id: string; name: string; exercises: string[] } | undefined;
        for (const category in dummyTemplates) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const categoryTemplates = (dummyTemplates as any)[category];
            if (Array.isArray(categoryTemplates)) {
                const template = categoryTemplates.find((t: { id: string }) => t.id === templateId);
                if (template) {
                    foundTemplate = template;
                    break;
                }
            }
        }

        if (foundTemplate) {
            workoutName = foundTemplate.name;
            baseExercises = foundTemplate.exercises.map((exName, index) => ({
                id: `${templateId}-ex${index}-${crypto.randomUUID()}`, name: exName,
                sets: 3, reps: 10, weight: 50, restTimeSeconds: 60, // Placeholders
            }));
        } else {
            console.error(`Template with ID ${templateId} not found.`);
            return null;
        }
    } else {
        console.log("Starting a truly blank session - not implemented");
        return null;
    }

    const activeExercises: ActiveExercise[] = baseExercises.map(ex => ({
        ...ex,
        loggedSets: Array.from({ length: ex.sets }, (_, i) => ({
            setIndex: i, reps: null, weight: null, completedAt: null,
        })),
    }));

    if (activeExercises.length === 0) {
        console.error("Cannot start session with no exercises.");
        return null;
    }

    return {
        sessionId: crypto.randomUUID(), templateId: templateId, workoutName: workoutName,
        exercises: activeExercises, currentExerciseIndex: 0, currentSetIndex: 0,
        startTime: new Date().toISOString(), endTime: null, status: 'in-progress',
        isResting: false, restDurationSeconds: 0, restEndTime: null,
    };
};
// --- End Dummy Data Fetching ---


export function ActiveWorkoutPage() {
    const location = useLocation();
    const navigate = useNavigate();
    const queryParams = new URLSearchParams(location.search);
    const templateId = queryParams.get('template');

    const [session, setSession] = useState<ActiveWorkoutSession | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentReps, setCurrentReps] = useState<string>('');
    const [currentWeight, setCurrentWeight] = useState<string>('');
    const [elapsedTime, setElapsedTime] = useState(0);
    const [isFinishAlertOpen, setIsFinishAlertOpen] = useState(false);
    const [restTimeRemaining, setRestTimeRemaining] = useState<number>(0);

    // --- useEffect for loading session ---
     useEffect(() => {
        console.log("Attempting to load session for template ID:", templateId);
        setIsLoading(true); setError(null);
        const loadedSession = loadWorkoutSession(templateId);
        if (loadedSession) {
            setSession(loadedSession);
            if (loadedSession.exercises.length > 0) {
                 const firstExercise = loadedSession.exercises[0];
--- END FILE: web\src\pages\app\ActiveWorkoutPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\CalendarPage.tsx ---
// src/pages/app/CalendarPage.tsx
import React from 'react';
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
// import { Button } from '@/components/ui/button'; // <-- REMOVE THIS LINE
import { format } from 'date-fns';

// Dummy data for days with workouts - replace with actual data fetching
const workoutLog: Record<string, { workoutName: string; id: string }[]> = {
  '2025-04-01': [{ workoutName: "Push Day", id: "w1" }],
  '2025-04-03': [{ workoutName: "Pull Day", id: "w2" }, { workoutName: "Quick Abs", id: "w3"}],
  '2025-03-28': [{ workoutName: "Leg Day", id: "w4" }],
};

// Generate Date objects for calendar modifier
const workoutDays = Object.keys(workoutLog).map(dateStr => {
    const [year, month, day] = dateStr.split('-').map(Number);
    return new Date(year, month - 1, day); // Month is 0-indexed
});


export function CalendarPage() {
  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(new Date());
  const [currentMonth, setCurrentMonth] = React.useState<Date>(new Date());

  const selectedDateString = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';
  const workoutsForSelectedDate = workoutLog[selectedDateString] || [];

  return (
    <div className="container mx-auto max-w-5xl p-4 md:p-6 space-y-6">
       <h1 className="text-2xl sm:text-3xl font-bold tracking-tight">Workout Calendar</h1>
       <div className="grid grid-cols-1 lg:grid-cols-3 lg:gap-8 gap-6">
          <Card className="lg:col-span-2">
             <Calendar
               mode="single"
               selected={selectedDate}
               onSelect={setSelectedDate}
               month={currentMonth}
               onMonthChange={setCurrentMonth}
               className="p-3 sm:p-4"
               modifiers={{
                 workout: workoutDays,
                 selectedWorkout: (date) => {
                    return workoutDays.some(wd => wd.toDateString() === date.toDateString()) &&
                           selectedDate?.toDateString() === date.toDateString();
                 }
               }}
               modifiersClassNames={{
                 workout: 'border border-primary/50 rounded-md',
                 selectedWorkout: 'bg-primary text-primary-foreground',
                 today: 'bg-muted text-foreground rounded-full',
               }}
               showOutsideDays={false}
             />
             <div className="p-4 border-t text-xs text-muted-foreground flex items-center gap-4">
                 <span>Legend:</span>
                 <span className='flex items-center gap-1.5'><span className='inline-block w-3 h-3 rounded-full bg-muted'></span>Today</span>
                 <span className='flex items-center gap-1.5'><span className='inline-block w-3 h-3 border border-primary/50 rounded'></span>Workout Logged</span>
             </div>
          </Card>

          <div className="lg:col-span-1">
             <Card className="min-h-[200px]">
                <CardHeader>
                    <CardTitle>
                       {selectedDate ? format(selectedDate, 'EEEE, MMMM d, yyyy') : 'Select a Date'}
                    </CardTitle>
                    <CardDescription>
                        {selectedDate ? "Workouts logged on this day:" : "Click a date on the calendar."}
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    {selectedDate ? (
                        workoutsForSelectedDate.length > 0 ? (
                            <ul className="space-y-2">
                                {workoutsForSelectedDate.map(workout => (
                                    <li key={workout.id} className="text-sm p-2 bg-muted/50 rounded-md hover:bg-muted transition-colors">
                                        <button onClick={() => console.log("Navigate to workout:", workout.id)} className="w-full text-left">
                                            {workout.workoutName}
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p className="text-sm text-muted-foreground italic">No workouts logged.</p>
                        )
                    ) : (
                        <p className="text-sm text-muted-foreground">Details will appear here.</p>
                    )}
                </CardContent>
             </Card>
          </div>
       </div>
    </div>
  );
}

export default CalendarPage;
--- END FILE: web\src\pages\app\CalendarPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\CreateWorkoutPage.tsx ---
// src/pages/app/CreateWorkoutPage.tsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ExerciseDetail, NewExerciseFormData, WorkoutTemplate } from '@/types/workout'; // Adjust path if needed
import { commonExercises } from '@/data/exercises'; // Import exercise data
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"; // Import Popover
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command"; // Import Command components
import { cn } from "@/lib/utils"; // Import cn utility
import { Check, ChevronsUpDown, PlusCircle, Trash2 } from 'lucide-react';

// Initial state for the new exercise form (name will be handled separately)
const initialNewExerciseState: Omit<NewExerciseFormData, 'name'> = {
  weight: 0,
  reps: 0,
  sets: 0,
  restTimeSeconds: 60, // Default rest time
};

export function CreateWorkoutPage() {
  const [workoutName, setWorkoutName] = useState<string>('');
  const [exercises, setExercises] = useState<ExerciseDetail[]>([]);

  // State for the "Add Exercise" form fields (excluding name)
  const [newExerciseDetails, setNewExerciseDetails] = useState<Omit<NewExerciseFormData, 'name'>>(initialNewExerciseState);
  // State specifically for the Combobox
  const [comboboxOpen, setComboboxOpen] = useState(false);
  const [selectedExerciseValue, setSelectedExerciseValue] = useState<string>(""); // Store the 'value' (e.g., 'bench-press')

  // Handler for input changes in the numerical fields
  const handleDetailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExerciseDetails(prev => ({
      ...prev,
      [name]: Number(value) || 0, // Ensure conversion for number inputs
    }));
  };

  // Handler to add the exercise from the form to the list
  const handleAddExercise = () => {
    const selectedExercise = commonExercises.find(ex => ex.value === selectedExerciseValue);

    // Basic validation
    if (!selectedExercise || newExerciseDetails.sets <= 0 || newExerciseDetails.reps <= 0) {
      console.warn('Please select an exercise and fill in Sets and Reps.');
      // TODO: Add user feedback (toast notification)
      return;
    }

    const exerciseToAdd: ExerciseDetail = {
      id: crypto.randomUUID(),
      name: selectedExercise.label, // Use the label for display in the list
      weight: newExerciseDetails.weight,
      reps: newExerciseDetails.reps,
      sets: newExerciseDetails.sets,
      restTimeSeconds: newExerciseDetails.restTimeSeconds,
    };

    setExercises(prev => [...prev, exerciseToAdd]);
    // Reset the form fields
    setNewExerciseDetails(initialNewExerciseState);
    setSelectedExerciseValue(""); // Reset combobox selection
  };

  // Handler to remove an exercise from the list
  const handleRemoveExercise = (idToRemove: string) => {
    setExercises(prev => prev.filter(ex => ex.id !== idToRemove));
  };

  // Handler for saving the workout (dummy implementation)
  const handleSaveWorkout = () => {
    // ... (save logic remains the same) ...
    if (!workoutName.trim()) {
        console.warn('Please enter a workout name.');
        // Add user feedback
        return;
    }
     if (exercises.length === 0) {
        console.warn('Please add at least one exercise.');
        // Add user feedback
        return;
    }

    const newWorkout: Omit<WorkoutTemplate, 'id' | 'createdAt' | 'updatedAt'> = { // Simulate structure before saving
      name: workoutName.trim(),
      exercises: exercises,
    };

    console.log('Saving Workout:', newWorkout);
    setWorkoutName('');
    setExercises([]);
    setNewExerciseDetails(initialNewExerciseState);
    setSelectedExerciseValue("");
  };

  // Find the label of the currently selected exercise for the button display
  const selectedExerciseLabel = commonExercises.find(
--- END FILE: web\src\pages\app\CreateWorkoutPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\PersonalRecordsPage.tsx ---
// src\pages\app\PersonalRecordsPage.tsx
import {
    Table,
    TableBody,
    TableCaption,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
  } from "@/components/ui/table";
  import { Button } from "@/components/ui/button";
  import { ArrowLeft } from "lucide-react";
  import { useNavigate } from "react-router-dom";
  
  // Dummy Personal Records data - Fetch this from your API later
  const records = [
    { id: "pr1", workout: "Bench Press", details: "12 x 100 kg", time: "0:59" },
    { id: "pr2", workout: "Squat", details: "8 x 140 kg", time: "1:15" },
    { id: "pr3", workout: "Deadlift", details: "5 x 180 kg", time: "1:30" },
    { id: "pr4", workout: "Overhead Press", details: "10 x 60 kg", time: "0:45" },
    { id: "pr5", workout: "Barbell Row", details: "10 x 80 kg", time: "0:55" },
    { id: "pr6", workout: "Bench Press", details: "10 x 102.5 kg", time: "1:05" },
    { id: "pr7", workout: "Squat", details: "5 x 145 kg", time: "1:25" },
    // Add more dummy records as needed
  ];
  
  export function PersonalRecordsPage() {
    const navigate = useNavigate();
  
    const handleBackClick = () => {
      navigate(-1); // Go back to the previous page (likely ProfilePage)
    };
  
    return (
      <div className="container mx-auto max-w-3xl p-4">
        {/* Header with Back Button and Title */}
        <div className="relative mb-6 flex items-center justify-center">
          {/* Back Button - Positioned absolutely on the left */}
          <Button
            variant="ghost"
            size="icon"
            className="absolute left-0"
            onClick={handleBackClick}
            aria-label="Go back"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          {/* Title - Centered */}
          <h1 className="text-2xl font-bold sm:text-3xl">Personal Records</h1>
           {/* Optional: Add a placeholder on the right if needed for balance or future icons */}
           <div className="absolute right-0 w-8 h-8"></div> {/* Adjust size as needed */}
        </div>
  
        {/* Records Table */}
        <Table>
          <TableCaption>Your recent personal records.</TableCaption>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[150px] sm:w-[200px]">Workout</TableHead>
              <TableHead>Reps x Weight</TableHead>
              <TableHead className="text-right">Time</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {records.length > 0 ? (
              records.map((record) => (
                <TableRow key={record.id}>
                  <TableCell className="font-medium">{record.workout}</TableCell>
                  <TableCell>{record.details}</TableCell>
                  <TableCell className="text-right font-mono">{record.time}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={3} className="text-center h-24 text-muted-foreground">
                  No personal records found. Start working out!
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    );
  }
  
  export default PersonalRecordsPage;
--- END FILE: web\src\pages\app\PersonalRecordsPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\PlaceholderPage.tsx ---
import { useLocation } from 'react-router-dom';

export function PlaceholderPage() {
  const location = useLocation();
  const pageName = location.pathname.replace('/', '').replace('-', ' '); // Basic name extraction

  return (
    <div className="flex min-h-[calc(100vh-8rem)] flex-col items-center justify-center p-4 text-center"> {/* Adjust min-height if needed */}
      <h1 className="mb-4 text-3xl font-bold capitalize">{pageName || 'Page'}</h1>
      <p className="text-muted-foreground">Content coming soon!</p>
      {/* You can add relevant icons here based on pageName if desired */}
    </div>
  );
}

export default PlaceholderPage;
--- END FILE: web\src\pages\app\PlaceholderPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\ProfilePage.tsx ---
// src/pages/app/ProfilePage.tsx

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Settings, Trophy } from "lucide-react";
import { Link } from "react-router-dom";

// Dummy user data - replace with actual data fetching later
const userData = {
  name: "Mitch", // Replace with dynamic data
  avatarUrl: null, // Replace with actual URL or keep null for fallback
  initials: "MC", // Replace with dynamic initials
  age: 28, // Replace with dynamic data
  weight: 85, // Replace with dynamic data (kg?)
  height: 180, // Replace with dynamic data (cm?)
};

// Dummy Personal Records data
const personalRecords = [
  { id: 1, workout: "Bench Press", details: "12 x 100 kg", time: "0:59" },
  { id: 2, workout: "Squat", details: "8 x 140 kg", time: "1:15" },
  { id: 3, workout: "Deadlift", details: "5 x 180 kg", time: "1:30" },
  // Add more records...
];

export function ProfilePage() {
  return (
    // Ensures the page container itself grows and centers its content
    // Use min-h-screen if content is short and centering looks weird vertically
    <div className="flex flex-1 flex-col items-center p-4 md:p-6">
      {/* Content Wrapper: Re-introduce max-width and padding here */}
      <div className="w-full max-w-3xl">
        {/* Top Action Icons */}
        <div className="mb-6 flex justify-between">
          <Link to="/personal-records" aria-label="Personal Records">
            <Button variant="ghost" size="icon">
              <Trophy className="h-6 w-6" />
            </Button>
          </Link>
          <Link to="/settings" aria-label="Settings">
            <Button variant="ghost" size="icon">
              <Settings className="h-6 w-6" />
            </Button>
          </Link>
        </div>

        {/* Profile Header */}
        <div className="mb-8 flex flex-col items-center space-y-4">
          <Avatar className="h-24 w-24 border sm:h-32 sm:w-32">
            <AvatarImage src={userData.avatarUrl ?? undefined} alt={userData.name} />
            <AvatarFallback className="text-3xl sm:text-4xl">
              {userData.initials}
            </AvatarFallback>
          </Avatar>
          <h1 className="text-2xl font-bold sm:text-3xl">{userData.name}</h1>
        </div>

        {/* Profile Details Grid */}
        <div className="grid grid-cols-3 gap-x-4 gap-y-6 text-center">
          <div>
            <p className="text-sm font-medium text-muted-foreground">Age</p>
            <p className="text-lg font-semibold">{userData.age}</p>
          </div>
          <div>
            <p className="text-sm font-medium text-muted-foreground">Weight</p>
            <p className="text-lg font-semibold">{userData.weight} kg</p>
          </div>
          <div>
            <p className="text-sm font-medium text-muted-foreground">Height</p>
            <p className="text-lg font-semibold">{userData.height} cm</p>
          </div>
        </div>

        {/* Optional Separator */}
        <hr className="my-8" />

        {/* Mini Personal Records Preview (Optional) */}
        <div>
          {/* Adjusted margin bottom */}
          <h2 className="mb-5 text-xl font-semibold">Recent Records</h2>
          {/* Use flex column for the list */}
          <div className="space-y-3"> {/* Increased spacing between records */}
            {personalRecords.slice(0, 3).map(record => (
              // Each record is a flex row with justify-between
              <div key={record.id} className="flex justify-between items-baseline text-sm">
                {/* Column 1: Workout Name (takes available space, truncate if needed) */}
                <span className="flex-1 font-medium pr-4 truncate">{record.workout}</span>
                {/* Column 2: Details (fixed width or shrink-0, right-aligned text) */}
                {/* Using text-center for the middle element as per image */}
                <span className="w-auto flex-shrink-0 px-4 text-center text-muted-foreground">{record.details}</span>
                {/* Column 3: Time (fixed width or shrink-0, right-aligned text) */}
                <span className="w-auto flex-shrink-0 text-right font-mono">{record.time}</span>
              </div>
            ))}
            {personalRecords.length > 3 && (
              <Link to="/personal-records" className="block pt-3 text-center text-sm text-primary hover:underline"> {/* Adjusted padding-top */}
                View all records...
              </Link>
            )}
            {personalRecords.length === 0 && (
--- END FILE: web\src\pages\app\ProfilePage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\StartWorkoutPage.tsx ---
// src/pages/app/StartWorkoutPage.tsx (Updated Example)

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { useNavigate } from "react-router-dom";
import { workoutTemplates } from "@/data/dummyWorkouts"; // your dummy structure
import { PlusCircle } from "lucide-react";
import type { WorkoutTemplate } from "@/types/workout";

export function StartWorkoutPage() {
  const navigate = useNavigate();

  // Local state for user-created templates
  const [userTemplates, setUserTemplates] = useState<WorkoutTemplate[]>([]);

  useEffect(() => {
    // Load user templates from localStorage
    try {
      const saved = localStorage.getItem("savedWorkoutTemplates");
      if (saved) {
        const parsed = JSON.parse(saved) as WorkoutTemplate[];
        setUserTemplates(parsed);
      }
    } catch (error) {
      console.warn("Failed to load user templates:", error);
    }
  }, []);

  // We'll assume `workoutTemplates` is an object like:
  // {
  //   upper: [ ... ],
  //   lower: [ ... ],
  //   ...
  // }
  // We'll also add a special "User Created" category for any new ones
  const userCategory = {
    name: "User Created",
    templates: userTemplates.map((tpl) => ({
      id: tpl.id,
      name: tpl.name,
        exercises: tpl.exercises.map((ex) => ex.name), // ex is already a string
    })),
  };

  // Convert the dummy object into a list of categories
  const templateCategories = Object.entries(workoutTemplates).map(
    ([catName, catTemplates]) => ({
      name: catName, // e.g., "upper", "lower"
      templates: catTemplates.map((tpl) => ({
        id: tpl.id,
        name: tpl.name,
        exercises: tpl.exercises.map((ex) => ex), // ex is already a string
      })),
    })
  );

  // Optionally, add our userCategory to the array, so user templates appear last
  templateCategories.push(userCategory);

  function handleStartBlank() {
    console.log("Navigating to create blank workout page");
    navigate("/app/workouts/new");
  }

  function handleSelectTemplate(templateId: string, categoryName: string) {
    console.log(`Selected Template: ${templateId} from ${categoryName}`);
    navigate(`/app/active-workout?template=${templateId}`);
  }

  return (
    <div className="container mx-auto max-w-4xl p-4 md:p-6 space-y-8">
      <Card className="text-center border-dashed hover:border-primary transition-colors">
        <CardHeader>
          <CardTitle className="flex items-center justify-center gap-2">
            <PlusCircle className="h-5 w-5 text-primary" />
            <span>Start Fresh</span>
          </CardTitle>
          <CardDescription>Begin a new workout without a template.</CardDescription>
        </CardHeader>
        <CardContent>
          <Button size="lg" onClick={handleStartBlank} className="w-full max-w-xs">
            Start Blank Workout
          </Button>
        </CardContent>
      </Card>

      <Separator />

      <h1 className="text-2xl font-bold text-center sm:text-left">Or Choose a Template</h1>

      {templateCategories.map((category) => (
        <Card key={category.name} className="mt-4">
--- END FILE: web\src\pages\app\StartWorkoutPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\StatsPage.tsx ---
// src/pages/app/StatsPage.tsx

import React, { useState, useEffect } from 'react'; // Import useState and useEffect
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";
import { workoutFrequencyData, workoutVolumeData, weightProgressData } from "@/data/dummyStats";
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  TooltipProps,
} from 'recharts';
import { ValueType, NameType } from 'recharts/types/component/DefaultTooltipContent';
import { ArrowUp, ArrowDown, Minus } from 'lucide-react';

// --- Define types ---
type TimeRange = "week" | "month" | "year";
type WeightPoint = { date: string; weight: number };
type FrequencyPoint = { week: string; workouts: number };
type VolumePoint = { date: string; volume: number };
type ChartDataPoint = WeightPoint | FrequencyPoint | VolumePoint;

interface SummaryStats {
    completionPercent: number;
    skippedPercent: number;
    partialPercent: number;
    exerciseProgression: {
      id: string;
      name: string;
      change: string;
      trend: 'up' | 'down' | 'same';
    }[];
}

interface TooltipPayloadEntry {
    name: NameType;
    value: ValueType;
    color?: string; // Color passed from Line/Bar component
    unit?: string;
    payload: ChartDataPoint;
}

// --- Dummy Data Function ---
const getSummaryStatsData = (range: TimeRange): SummaryStats => {
  const baseCompletion = 70 + Math.floor(Math.random() * 25);
  const baseSkipped = 2 + Math.floor(Math.random() * 6);
  const partial = 100 - baseCompletion - baseSkipped;
  const finalPartial = Math.max(0, partial);
  const finalCompletion = 100 - baseSkipped - finalPartial;
  const progression = [
      { id: 'ex1', name: 'Bench Press', change: "+5 lbs", trend: 'up' as const },
      { id: 'ex2', name: 'Squat', change: "+10 lbs", trend: 'up' as const },
      { id: 'ex3', name: 'Tricep Extension', change: "-1.5 lbs", trend: 'down' as const },
      { id: 'ex4', name: 'Deadlift', change: "No Change", trend: 'same' as const },
    ];
   if (range === 'week') progression.pop();
   if (range === 'year') progression.shift();

  return {
    completionPercent: finalCompletion,
    skippedPercent: baseSkipped,
    partialPercent: finalPartial,
    exerciseProgression: progression,
  };
};

// --- Custom Tooltip Component ---
const CustomTooltip = ({ active, payload, label }: TooltipProps<ValueType, NameType>) => {
   if (active && payload && payload.length) {
    const typedPayload = payload as TooltipPayloadEntry[];
    const dataPoint = typedPayload[0]?.payload;

    const getUnit = (point: ChartDataPoint | undefined): string | undefined => {
        if (!point) return undefined;
        if ('weight' in point) return ' kg';
        if ('volume' in point) return '';
        if ('workouts' in point) return '';
        return undefined;
    }

    const primaryEntry = typedPayload[0];
    const primaryValue = primaryEntry?.value;
    const primaryUnit = getUnit(dataPoint);
    // Use the color passed from the Line/Bar component via the 'color' prop
    const tooltipColor = primaryEntry?.color || 'hsl(var(--foreground))'; // Fallback to foreground

    return (
      <div className="rounded-lg border border-border/80 bg-background/90 p-2.5 shadow-lg backdrop-blur-sm">
        <div className="mb-1.5 font-semibold text-foreground">{label}</div>
        <div className="flex items-baseline space-x-1.5 text-sm">
           <span className="font-medium" style={{ color: tooltipColor }}>
             {primaryEntry?.name}:
--- END FILE: web\src\pages\app\StatsPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\app\WorkoutsPage.tsx ---
import {
    Card,
    CardContent,
    CardHeader,
    CardTitle,
  } from "@/components/ui/card";
  import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
  } from "@/components/ui/table";
  import { CheckCircle2 } from "lucide-react"; // Icon for completed sets
  
  // --- Dummy Workout History Data ---
  type WorkoutSet = {
    id: string;
    setNumber: number;
    weight: string; // e.g., "100 kg", "BW"
    reps: string;   // e.g., "10", "8-12"
    time?: string;  // Optional, e.g., "0:45"
    completed: boolean;
  };
  
  type LoggedExercise = {
    id: string;
    name: string;
    sets: WorkoutSet[];
  };
  
  type WorkoutDayLog = {
    date: string; // e.g., "Jan 16 2024"
    exercises: LoggedExercise[];
  };
  
  // Replace with actual data fetching later
  const workoutHistory: WorkoutDayLog[] = [
    {
      date: "Jan 16 2024",
      exercises: [
        {
          id: "e1", name: "Bench Press", sets: [
            { id: "s1", setNumber: 1, weight: "100 kg", reps: "12", time: "0:59", completed: true },
            { id: "s2", setNumber: 2, weight: "100 kg", reps: "10", time: "1:15", completed: true },
            { id: "s3", setNumber: 3, weight: "100 kg", reps: "8", time: "1:30", completed: true },
          ]
        },
        {
          id: "e2", name: "Squat", sets: [
             { id: "s4", setNumber: 1, weight: "140 kg", reps: "8", completed: true },
             { id: "s5", setNumber: 2, weight: "140 kg", reps: "8", completed: true },
             { id: "s6", setNumber: 3, weight: "140 kg", reps: "6", completed: false }, // Example incomplete
          ]
        },
      ]
    },
    {
      date: "Jan 15 2024",
       exercises: [
        {
          id: "e3", name: "Pull Up", sets: [
            { id: "s7", setNumber: 1, weight: "BW", reps: "10", completed: true },
            { id: "s8", setNumber: 2, weight: "BW", reps: "8", completed: true },
            { id: "s9", setNumber: 3, weight: "BW", reps: "7", completed: true },
          ]
        },
         {
          id: "e4", name: "Overhead Press", sets: [
            { id: "s10", setNumber: 1, weight: "60 kg", reps: "10", time: "0:45", completed: true },
            { id: "s11", setNumber: 2, weight: "60 kg", reps: "9", time: "1:00", completed: true },
          ]
        },
      ]
    },
     {
      date: "Jan 14 2024",
       exercises: [
        {
          id: "e5", name: "Deadlift", sets: [
            { id: "s12", setNumber: 1, weight: "180 kg", reps: "5", completed: true },
          ]
        },
      ]
    },
    // Add more days...
  ];
  // --- End Dummy Data ---
  
  
  export function WorkoutsPage() {
    return (
      <div className="container mx-auto max-w-4xl p-4 space-y-8">
        {workoutHistory.length === 0 ? (
          <div className="text-center text-muted-foreground py-10">
            No workout history found. Start logging your sessions!
          </div>
        ) : (
          workoutHistory.map((dayLog) => (
--- END FILE: web\src\pages\app\WorkoutsPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\CreateProfilePage.tsx ---
// src/pages/CreateProfilePage.tsx
import React from 'react';
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useNavigate } from "react-router-dom";

export function CreateProfilePage() {
  const navigate = useNavigate();

  const handleProfileSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const profileData = {
      name: formData.get('name'),
      age: formData.get('age'),
      height: formData.get('height'),
      weight: formData.get('weight'),
    };
    console.log("Profile submitted:", profileData);
    // TODO: Add actual API call to save profile
    console.log("Profile created (dummy), navigating to dashboard...");
    navigate('/dashboard');
  };

  const handleSkip = () => {
    console.log("Profile creation skipped, navigating to dashboard...");
    // TODO: Maybe mark profile as skipped in backend?
    navigate('/dashboard');
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-background p-4">
      <Card className="w-full max-w-sm">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl font-bold">Create Profile</CardTitle>
          <CardDescription>
            Enter your details below. You can skip this step.
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleProfileSubmit}>
          <CardContent className="space-y-4">
            {/* Name Input */}
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                name="name"
                type="text"
                placeholder="Enter Name Here..."
                autoComplete="name"
              />
            </div>
            {/* Age Input */}
            <div className="space-y-2">
              <Label htmlFor="age">Age</Label>
              <Input
                id="age"
                name="age"
                type="number"
                placeholder="Enter Age Here..."
                min="0"
              />
            </div>
            {/* Height Input */}
            <div className="space-y-2">
              <Label htmlFor="height">Height (cm)</Label>
              <Input
                id="height"
                name="height"
                type="number"
                placeholder="Enter Height Here..."
                min="0"
                step="0.1"
              />
            </div>
            {/* Weight Input */}
            <div className="space-y-2">
              <Label htmlFor="weight">Weight (kg)</Label>
              <Input
                id="weight"
                name="weight"
                type="number"
                placeholder="Enter Weight Here..."
                min="0"
                step="0.1"
              />
            </div>
          </CardContent>
          {/* Updated Footer Layout: Stacked on mobile, row on sm+, Enter button pushed right */}
          <CardFooter className="flex flex-col-reverse gap-2 pt-4 sm:flex-row sm:justify-end sm:space-x-2">
             {/* Skip Button: Outline variant, type="button" to prevent form submission */}
--- END FILE: web\src\pages\CreateProfilePage.tsx ---

--- START FILE (First 100 lines): web\src\pages\LandingPage.tsx ---
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom"; // Make sure this is imported

export function LandingPage() {
  const navigate = useNavigate();

  const handleLoginClick = () => { // This function should be used
    navigate('/login');
  };

  const handleRegisterClick = () => {
    navigate('/register');
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-background p-4">
      {/* Optional Background Image */}
      {/* <div className="absolute inset-0 z-[-1] bg-[url('/path/to/your/gym-background.jpg')] bg-cover bg-center opacity-30 dark:opacity-20" /> */}
      {/* <div className="absolute inset-0 z-[-2] bg-background" /> */}

      <div className="flex flex-col items-center space-y-8 text-center">
        {/* App Title */}
        <h1 className="text-6xl font-extrabold tracking-tight text-foreground sm:text-7xl md:text-8xl lg:text-9xl">
          Strive
        </h1>

        {/* Action Buttons */}
        <div className="flex w-full max-w-xs flex-col space-y-4 pt-8 sm:max-w-none sm:flex-row sm:justify-center sm:space-x-4 sm:space-y-0">
          <Button
            size="lg"
            className="w-full sm:w-auto sm:px-10"
            onClick={handleLoginClick} // <-- Ensure onClick uses handleLoginClick
          >
            Login
          </Button>
          <Button
            size="lg"
            variant="outline"
            className="w-full sm:w-auto sm:px-10"
            onClick={handleRegisterClick} // <-- Ensure onClick uses handleRegisterClick
          >
            Register
          </Button>
        </div>
      </div>
    </div>
  );
}

export default LandingPage;
--- END FILE: web\src\pages\LandingPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\LoginPage.tsx ---
// src/pages/LoginPage.tsx
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Link, useNavigate } from "react-router-dom"; // Import useNavigate

export function LoginPage() {
  const navigate = useNavigate(); // <-- Initialize navigate hook

  const handleLoginSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // Prevent default form submission

    // Dummy action: Log form data
    const formData = new FormData(event.currentTarget);
    const loginData = {
      email: formData.get('email'),
      // Don't log passwords in real applications
      // password: formData.get('password'),
    };
    console.log("Login submitted with data:", loginData);

    // Add your actual login logic here (e.g., API call, validation)
    // Simulate successful login
    const isLoginSuccessful = true; // Replace with actual check

    if (isLoginSuccessful) {
      console.log("Login successful (dummy), navigating to dashboard...");
      navigate('/dashboard'); // <-- Navigate to /dashboard on success
    } else {
      // Handle login failure (e.g., show error message)
      console.error("Login failed (dummy)");
      // Example: setError("Invalid email or password.");
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-background p-4">
      <Card className="w-full max-w-sm">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl font-bold">Login</CardTitle>
          <CardDescription>
            Enter your email below to login to your account
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleLoginSubmit}>
          <CardContent className="space-y-4">
            {/* Email Input */}
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email" // Add name attribute for FormData access
                type="email"
                placeholder="you@example.com"
                required
                autoComplete="email"
              />
            </div>
            {/* Password Input */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="password">Password</Label>
                <Link
                  to="/forgot-password" // Link to a future forgot password page
                  className="text-sm text-muted-foreground hover:text-primary underline-offset-4 hover:underline"
                >
                  Forgot password?
                </Link>
              </div>
              <Input
                id="password"
                name="password" // Add name attribute for FormData access
                type="password"
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                required
                autoComplete="current-password"
              />
            </div>
             {/* Placeholder for error messages if needed */}
             {/* {error && <p className="text-sm text-destructive">{error}</p>} */}
          </CardContent>
          <CardFooter className="flex flex-col space-y-4">
             <Button type="submit" className="w-full">
              Login
            </Button>
             <p className="text-center text-sm text-muted-foreground">
              Don't have an account?{' '}
              <Link
                to="/register" // Link to the register page
                className="font-medium text-primary underline-offset-4 hover:underline"
              >
                Register
--- END FILE: web\src\pages\LoginPage.tsx ---

--- START FILE (First 100 lines): web\src\pages\RegisterPage.tsx ---
// src/pages/RegisterPage.tsx
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Link, useNavigate } from "react-router-dom";
import React, { useState } from "react";

export function RegisterPage() {
  const navigate = useNavigate();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState<string | null>(null);

  const handleRegisterSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setError(null);

    if (password !== confirmPassword) {
      setError("Passwords do not match.");
      return;
    }

    console.log("Registration submitted with data:", {
      email: event.currentTarget.email.value,
      // Don't log sensitive data in production
      // password: password,
      phoneNumber: event.currentTarget.phoneNumber.value,
    });

    // On successful registration (dummy):
    console.log("Registration successful (dummy), navigating to create profile...");
    navigate('/create-profile'); // <-- Navigate to Create Profile page now
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-background p-4">
      <Card className="w-full max-w-sm">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl font-bold">Create Account</CardTitle>
          <CardDescription>
            Enter your details below to create an account
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleRegisterSubmit}>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="you@example.com"
                required
                autoComplete="email"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                name="password"
                type="password"
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                required
                autoComplete="new-password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
                required
                autoComplete="new-password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className={error ? 'border-destructive' : ''}
              />
            </div>
             <div className="space-y-2">
              <Label htmlFor="phoneNumber">Phone Number (Optional)</Label>
              <Input
                id="phoneNumber"
                name="phoneNumber"
                type="tel"
                placeholder="(123) 456-7890"
                autoComplete="tel"
              />
--- END FILE: web\src\pages\RegisterPage.tsx ---

--- START FILE (First 100 lines): web\src\types\workout.ts ---
// src/types/workout.ts

export interface ExerciseDetail {
    id: string; // Unique identifier for this specific exercise instance in the list
    name: string;
    weight: number; // Assuming kg or lbs, consistency needed later
    reps: number;
    sets: number;
    restTimeSeconds: number; // Rest time after completing all sets of this exercise
  }
  
  export interface WorkoutTemplate {
    id: string; // Unique identifier for the saved template
    name: string;
    exercises: ExerciseDetail[];
    createdAt: string; // ISO date string
    updatedAt: string; // ISO date string
  }

  export interface LoggedSet {
    setIndex: number; // 0-based index of the set within the exercise
    reps: number | null; // Logged reps (null if not logged yet)
    weight: number | null; // Logged weight (null if not logged yet)
    completedAt: string | null; // ISO timestamp when completed
  }
  
  // Represents an exercise being performed during an active session
  export interface ActiveExercise extends ExerciseDetail {
    loggedSets: LoggedSet[];
    // Maybe add notes field later
  }
  
  // Represents the overall state of the workout session
  export interface ActiveWorkoutSession {
    sessionId: string;
    templateId: string | null;
    workoutName: string;
    exercises: ActiveExercise[];
    currentExerciseIndex: number;
    currentSetIndex: number;
    startTime: string;
    endTime: string | null;
    status: 'not-started' | 'in-progress' | 'paused' | 'completed' | 'cancelled';
    // --- Rest Timer State ---
    isResting: boolean;
    restDurationSeconds: number; // Total planned rest time for the current period
    restEndTime: string | null; // Timestamp when the current rest period ends
  }
  
  // Type for the form state when adding a new exercise
  export type NewExerciseFormData = Omit<ExerciseDetail, 'id'>;
--- END FILE: web\src\types\workout.ts ---

--- START FILE (First 100 lines): web\src\App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
--- END FILE: web\src\App.css ---

--- START FILE (First 100 lines): web\src\App.tsx ---
// src/App.tsx
import { Routes, Route, Navigate } from 'react-router-dom';

// --- Page Imports ---
import LandingPage from '@/pages/LandingPage';
import LoginPage from '@/pages/LoginPage';
import RegisterPage from '@/pages/RegisterPage';
import CreateProfilePage from '@/pages/CreateProfilePage';

// Layouts
import { MainLayout } from '@/components/layout/MainLayout';
import { SettingsLayout } from '@/components/layout/SettingsLayout';

// App Pages
import ProfilePage from '@/pages/app/ProfilePage';
// import PlaceholderPage from '@/pages/app/PlaceholderPage'; // Can remove import
import PersonalRecordsPage from '@/pages/app/PersonalRecordsPage';
import { StartWorkoutPage } from '@/pages/app/StartWorkoutPage';
import WorkoutsPage from '@/pages/app/WorkoutsPage';
import CalendarPage from '@/pages/app/CalendarPage';
import { StatsPage } from '@/pages/app/StatsPage';
import { CreateWorkoutPage } from '@/pages/app/CreateWorkoutPage'; // *** IMPORT THE NEW PAGE ***
import { ActiveWorkoutPage } from '@/pages/app/ActiveWorkoutPage';

// Settings Pages
import SettingsAccountPage from '@/pages/app/settings/SettingsAccountPage';
import SettingsAppearancePage from '@/pages/app/settings/SettingsAppearancePage';
import SettingsSubscriptionPage from '@/pages/app/settings/SettingsSubscriptionPage';
import SettingsLanguagePage from '@/pages/app/settings/SettingsLanguagePage';
import SettingsContactPage from '@/pages/app/settings/SettingsContactPage';

// --- Not Found Page (Optional) ---
// import NotFoundPage from '@/pages/NotFoundPage';

function App() {
  return (
    <Routes>
      {/* --- Public/Auth Routes (No Layout) --- */}
      <Route path="/" element={<LandingPage />} />
      <Route path="/login" element={<LoginPage />} />
      <Route path="/register" element={<RegisterPage />} />
      <Route path="/create-profile" element={<CreateProfilePage />} />

      {/* --- Authenticated Routes (within MainLayout) --- */}
      <Route element={<MainLayout />}>
        <Route path="/dashboard" element={<Navigate to="/profile" replace />} />
        <Route path="/profile" element={<ProfilePage />} />
        <Route path="/workouts" element={<WorkoutsPage />} />
        <Route path="/start-workout" element={<StartWorkoutPage />} />
        <Route path="/calendar" element={<CalendarPage />} />
        <Route path="/stats" element={<StatsPage />} />
        <Route path="/personal-records" element={<PersonalRecordsPage />} />
        {/* *** ADD THE ROUTE FOR CREATING A WORKOUT *** */}
        <Route path="/app/workouts/new" element={<CreateWorkoutPage />} />
        <Route path="/app/active-workout" element={<ActiveWorkoutPage />} />
        {/* Example route for viewing/editing a specific workout template (future) */}
        {/* <Route path="/app/workouts/:templateId" element={<ViewWorkoutTemplatePage />} /> */}
        {/* Example route for an active workout session (future) */}
        {/* <Route path="/app/active-workout/:sessionId" element={<ActiveWorkoutPage />} /> */}

      </Route> {/* End of routes within MainLayout */}


      {/* --- Settings Routes (within SettingsLayout) --- */}
      <Route path="/settings" element={<SettingsLayout />}>
          <Route index element={<Navigate to="/settings/account" replace />} />
          <Route path="account" element={<SettingsAccountPage />} />
          <Route path="appearance" element={<SettingsAppearancePage />} />
          <Route path="subscription" element={<SettingsSubscriptionPage />} />
          <Route path="language" element={<SettingsLanguagePage />} />
          <Route path="contact" element={<SettingsContactPage />} />
      </Route> {/* End of routes within SettingsLayout */}


      {/* --- Catch-all 404 Route (Optional) --- */}
      {/* <Route path="*" element={<NotFoundPage />} /> */}

    </Routes>
  );
}

export default App;
--- END FILE: web\src\App.tsx ---

--- START FILE (First 100 lines): web\src\index.css ---
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
--- END FILE: web\src\index.css ---

--- START FILE (First 100 lines): web\src\main.tsx ---
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
// Update Provider import name and path
import { AppSettingsProvider } from './components/contexts/AppSettingsProvider'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      {/* Use the renamed provider */}
      <AppSettingsProvider
        defaultTheme="system"
        defaultLanguage="en" // Optional: set default language
        storageKeyTheme="vite-ui-theme"
        storageKeyLanguage="vite-ui-language" // Optional: set storage key
      >
        <App />
      </AppSettingsProvider>
    </BrowserRouter>
  </React.StrictMode>,
)
--- END FILE: web\src\main.tsx ---

--- START FILE (First 100 lines): web\src\vite-env.d.ts ---
/// <reference types="vite/client" />
--- END FILE: web\src\vite-env.d.ts ---

--- START FILE (First 100 lines): web\.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
--- END FILE: web\.gitignore ---

--- START FILE (First 100 lines): web\.prettierrc.json ---
{
    "semi": false,
    "singleQuote": true,
    "plugins": ["prettier-plugin-tailwindcss"]
}
--- END FILE: web\.prettierrc.json ---

--- START FILE (First 100 lines): web\components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
--- END FILE: web\components.json ---

--- START FILE (First 100 lines): web\eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
--- END FILE: web\eslint.config.js ---

--- START FILE (First 100 lines): web\index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
--- END FILE: web\index.html ---

--- START FILE (First 100 lines): web\package.json ---
{
  "name": "web",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "lucide-react": "^0.487.0",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.4.1",
    "recharts": "^2.15.2",
    "tailwind-merge": "^3.1.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/vite": "^4.1.2",
    "@types/node": "^22.14.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@types/recharts": "^1.8.29",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^4.1.2",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
--- END FILE: web\package.json ---

--- START FILE (First 100 lines): web\README.md ---
# Frontend_App_Speedrun (Web Prototype - Strive App)

This project is the web frontend prototype for a fitness tracking application, tentatively named "Strive" (based on initial designs). It's being developed iteratively as part of the `Frontend_App_Speedrun` initiative.

## Current Status: Minimal Viable Prototype (MVP)

This prototype currently includes the foundational UI and navigation flow for key application areas.

*   **Functionality:** Core navigation, basic form handling (login, register, profile creation), theme switching, and demo language switching (for settings navigation) are implemented. Most data displayed is **dummy data**.
*   **UI:** Built using Shadcn/ui components with the specified theme (New York style, Gray base color). Layouts are responsive.
*   **Backend:** **No backend integration** exists yet. All actions (login, register, save profile, etc.) currently simulate success and log to the console or navigate accordingly.
*   **Core Logic:** Workout tracking timers, detailed stats calculations, and template application logic are **not yet implemented**.

## Tech Stack

*   **Framework/Library:** React 19
*   **Language:** TypeScript
*   **Build Tool:** Vite
*   **Styling:** Tailwind CSS v4 (via `@tailwindcss/vite`)
*   **Component Library:** Shadcn/ui
    *   Style: New York
    *   Base Color: Gray
    *   Mode: CSS Variables
*   **Routing:** React Router DOM v6
*   **Icons:** Lucide React
*   **State Management (Implicit):** React Context (for Theme/Language)
*   **Persistence:** `localStorage` (for theme/language preference)
*   **Charting (Installed):** Recharts (integration pending)
*   **Code Quality:** ESLint, Prettier (based on standard Vite setup)

## Project Structure (`web/src/`)

*   `components/`: Contains Shadcn `ui` components, shared `layout` components (BottomNav, MainLayout, SettingsLayout), and specific `settings` components (SettingsNav).
*   `contexts/`: Holds React context providers (e.g., `AppSettingsProvider`).
*   `hooks/`: Custom hooks (e.g., `useAppSettings`).
*   `lib/`: Utility functions (e.g., Shadcn's `cn`).
*   `pages/`: Page-level components, organized into:
    *   `app/`: Authenticated application screens (Profile, Workouts, Calendar, Stats, etc.).
        *   `settings/`: Specific settings pages (Account, Appearance, etc.).
    *   Auth/Public pages (LandingPage, LoginPage, etc.).

## Getting Started

### Prerequisites

*   Node.js (v22+ recommended)
*   npm (v11+ recommended)
*   Developed natively on Windows (should not affect standard commands but provided for context).

### Installation

1.  Navigate to the web project directory:
    ```bash
    cd Frontend_App_Speedrun/web
    ```
2.  Install dependencies:
    ```bash
    npm install
    ```
    *   **Note (React 19):** Due to ongoing ecosystem updates for React 19, some peer dependencies (especially related to `react-day-picker` used by Shadcn's Calendar) might cause conflicts during installation. If you encounter `ERESOLVE` errors, try installing with the `--legacy-peer-deps` flag (as was necessary during development for certain packages like `recharts`):
        ```bash
        npm install --legacy-peer-deps
        ```

### Running the Development Server

1.  Start the Vite dev server:
    ```bash
    npm run dev
    ```
2.  Open your browser and navigate to the local URL provided (usually `http://localhost:5173`).

## Implemented Features (MVP)

*   **Authentication Flow:**
    *   Landing Page (Login/Register options)
    *   Login Page (dummy submit -> navigates to dashboard)
    *   Registration Page (dummy validation & submit -> navigates to profile creation)
    *   Create Profile Page (dummy submit/skip -> navigates to dashboard)
*   **Main Application Layout:**
    *   Persistent Bottom Navigation for authenticated sections.
    *   Main content area rendering routed pages.
*   **Core App Screens:**
    *   Profile Screen: Displays basic user info (dummy), links to Settings & Personal Records.
    *   Personal Records Screen: Displays PRs in a table (dummy data).
    *   Start Workout Screen: Options for blank workout or selecting from Barbell/Bodyweight templates (dummy data, navigation placeholders).
    *   Workouts Screen: Displays workout history log grouped by date (dummy data).
    *   Calendar Screen: Monthly view highlighting workout days (dummy data), basic date selection.
    *   Stats Screen: Time range selection, progress bar summaries, exercise progression list (dummy data), chart placeholders.
*   **Settings:**
    *   Dedicated Settings Layout with sidebar navigation.
    *   Account Settings Page (UI complete, actions are dummies).
    *   Appearance Settings Page (Theme selection: Light/Dark/System, functional).
    *   Subscription Settings Page (UI complete, shows dummy plans).
    *   Language Settings Page (UI complete, demo language switching EN/ES for Settings Nav text).
    *   Contact Us Page (Displays dummy contact info).
    *   Logout button (dummy action).
*   **General:**
    *   Functional Dark Mode (Light/Dark/System) persisted in localStorage.
    *   Basic responsive design.
--- END FILE: web\README.md ---

--- START FILE (First 100 lines): web\tailwind.config.ts ---
// web/tailwind.config.ts
import type { Config } from 'tailwindcss'
import animatePlugin from 'tailwindcss-animate'

const config: Config = {
  darkMode: "class", // <-- Change from ["class"] to "class"
  content: [
    './index.html',
    './src/**/*.{js,ts,jsx,tsx}',
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [animatePlugin],
}

export default config
--- END FILE: web\tailwind.config.ts ---

--- START FILE (First 100 lines): web\tsconfig.app.json ---
// web/tsconfig.app.json
{
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    // "allowImportingTsExtensions": true, // Keep removed
    // "isolatedModules": true, // Keep removed for now
    "moduleDetection": "force",
    "noEmit": true, // Keep this true
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"],
  // "references": [{ "path": "./tsconfig.node.json" }] // <-- REMOVE this line entirely
}
--- END FILE: web\tsconfig.app.json ---

--- START FILE (First 100 lines): web\tsconfig.json ---
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  // Add these two lines inside compilerOptions
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
--- END FILE: web\tsconfig.json ---

--- START FILE (First 100 lines): web\tsconfig.node.json ---
{
  "compilerOptions": {
    
    "declaration": true,
    "composite": true,

    // Existing options:
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true, // Keep this as true

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
--- END FILE: web\tsconfig.node.json ---

--- START FILE (First 100 lines): web\vite.config.ts ---
// web/vite.config.ts
import path from "path"
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss(), // <-- Just call the plugin here
  ],
  // Remove the css.tailwindcss section
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
--- END FILE: web\vite.config.ts ---

